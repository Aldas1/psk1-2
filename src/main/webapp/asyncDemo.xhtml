<!-- asyncDemo.xhtml -->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">

<h:head>
    <title>Asynchronous Demonstration</title>
    <h:outputStylesheet library="css" name="styles.css"/>
</h:head>

<h:body>
    <div class="container">
        <div class="header">
            <h1>Asynchronous Processing Demo</h1>
            <div class="nav">
                <h:link outcome="index" value="Home" styleClass="nav-item"/>
                <h:link outcome="faculties" value="Faculties" styleClass="nav-item"/>
                <h:link outcome="courses" value="Courses" styleClass="nav-item"/>
                <h:link outcome="students" value="Students" styleClass="nav-item"/>
                <h:link outcome="asyncDemo" value="Async Demo" styleClass="nav-item current"/>
            </div>
        </div>

        <div class="content">
            <h2>Asynchronous Processing Demonstration</h2>

            <h:messages globalOnly="true" styleClass="info-message"/>

            <div class="form-section">
                <h3>Long-Running Calculation</h3>
                <p>This demonstrates how to perform a long-running calculation asynchronously.</p>

                <h:form id="asyncForm">
                    <div class="form-row">
                        <h:outputLabel for="calculationInput" value="Input:"/>
                        <h:inputText id="calculationInput" value="#{asyncDemoBean.calculationInput}"/>
                    </div>

                    <div class="form-row">
                        <h:outputLabel value="Result:"/>
                        <h:outputText value="#{asyncDemoBean.calculationResult}" styleClass="#{asyncDemoBean.calculationInProgress ? 'processing' : ''}"/>
                    </div>

                    <div class="form-actions">
                        <h:commandButton value="Start Calculation" action="#{asyncDemoBean.startAsyncCalculation()}" styleClass="button"/>
                        <h:commandButton value="Check Result" action="#{asyncDemoBean.checkCalculationResult()}" styleClass="button"/>
                    </div>
                </h:form>
            </div>

            <div class="form-section">
                <h3>Async Database Query</h3>
                <p>This demonstrates an asynchronous database query.</p>

                <h:form id="asyncQueryForm">
                    <div class="form-row">
                        <h:outputLabel value="Student Count:"/>
                        <h:outputText value="#{asyncDemoBean.studentCount != null ? asyncDemoBean.studentCount : 'Not calculated yet'}"/>
                    </div>

                    <div class="form-actions">
                        <h:commandButton value="Count Students Async" action="#{asyncDemoBean.countStudentsAsync()}" styleClass="button"/>
                        <h:commandButton value="Check Count" action="#{asyncDemoBean.checkStudentCount()}" styleClass="button"/>
                    </div>
                </h:form>
            </div>

            <div class="info-box">
                <h3>Key Points About Asynchronous EJBs</h3>
                <ul>
                    <li>Asynchronous methods cannot join the caller's transaction - they must use their own transaction scope.</li>
                    <li>They cannot use @RequestScoped EntityManager because the request might end before the async method completes.</li>
                    <li>They must use container-managed EntityManager with application scope or manually handle EntityManager lifecycle.</li>
                    <li>Async methods return either void or Future&lt;T&gt; to allow checking completion status and retrieving results.</li>
                </ul>
            </div>
        </div>

        <div class="footer">
            <p>2025 University Management System</p>
        </div>
    </div>
</h:body>
</html>